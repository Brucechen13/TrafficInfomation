package com.dlut.traffic.fragment;

import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationListener;
import com.amap.api.location.LocationManagerProxy;
import com.amap.api.location.LocationProviderProxy;
import com.amap.api.maps2d.AMap;
import com.amap.api.maps2d.CameraUpdateFactory;
import com.amap.api.maps2d.LocationSource;
import com.amap.api.maps2d.LocationSource.OnLocationChangedListener;
import com.amap.api.maps2d.MapView;
import com.dlut.traffic.R;
import com.dlut.traffic.msg.UploadMsg;

import android.content.Intent;
import android.location.Location;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.TextView;

public class FragmentMap extends BaseFragment implements LocationSource,
		AMapLocationListener, OnClickListener {

	private TextView tv;
	private MapView mapView;
	private AMap aMap;
	private OnLocationChangedListener mListener;
	private LocationManagerProxy mAMapLocationManager;
	
	private AMapLocation curLocation;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// 加载/res/layout/目录下的fragment_book_detail.xml布局文件
		View rootView = inflater.inflate(R.layout.fragment_map, container,
				false);
		return rootView;
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		Log.d("traffic", "Map create");
		super.onActivityCreated(savedInstanceState);
		mapView = (MapView) getView().findViewById(R.id.map);
		mapView.onCreate(savedInstanceState);// 此方法必须重写

		getView().findViewById(R.id.edit_info).setOnClickListener(this);
		init();
	}

	/**
	 * 初始化AMap对象
	 */
	private void init() {
		if (aMap == null) {
			Log.d("traffic", "Map init");
			aMap = mapView.getMap();
			aMap.setLocationSource(this);// 设置定位监听
			aMap.getUiSettings().setMyLocationButtonEnabled(true);// 设置默认定位按钮是否显示
			aMap.moveCamera(CameraUpdateFactory.zoomTo(20));// 设置缩放比例
			aMap.setMyLocationEnabled(true);// 设置为true表示显示定位层并可触发定位，false表示隐藏定位层并不可触发定位，默认是false
			// 设置定位的类型为定位模式：定位（AMap.LOCATION_TYPE_LOCATE）、跟随（AMap.LOCATION_TYPE_MAP_FOLLOW）
			// 地图根据面向方向旋转（AMap.LOCATION_TYPE_MAP_ROTATE）三种模式
			//aMap.setMyLocationType(AMap.LOCATION_TYPE_LOCATE);
		}

	}

	/**
	 * 方法必须重写
	 */ 
	@Override
	public void onResume() {
		Log.d("traffic", "Map Onresume");
		super.onResume();
		mapView.onResume();
	}

	/**
	 * 方法必须重写
	 */
	@Override
	public void onPause() {
		Log.d("traffic", "Map onPause");
		super.onPause();
		mapView.onPause();
		deactivate();
	}

	/**
	 * 方法必须重写
	 */
	@Override
	public void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		mapView.onSaveInstanceState(outState);
	}

	/**
	 * 方法必须重写
	 */
	@Override
	public void onDestroy() {
		Log.d("traffic", "Map onDEstroy");
		super.onDestroy();
//		mapView.onDestroy();
	}

	@Override
	public void onLocationChanged(AMapLocation arg0) {
		// TODO Auto-generated method stub
		if (mListener != null && arg0 != null) {
			if (arg0.getAMapException().getErrorCode() == 0) {
				mListener.onLocationChanged(arg0);// 显示系统小蓝点
				curLocation = arg0;			}
		}
	}

	/**
	 * 激活定位
	 */
	@Override
	public void activate(OnLocationChangedListener listener) {
		mListener = listener;
		Log.d("traffic", "Map activate");
		if (mAMapLocationManager == null) {
			mAMapLocationManager = LocationManagerProxy.getInstance(this
					.getActivity());
			// 此方法为每隔固定时间会发起一次定位请求，为了减少电量消耗或网络流量消耗，
			// 注意设置合适的定位时间的间隔，并且在合适时间调用removeUpdates()方法来取消定位请求
			// 在定位结束后，在合适的生命周期调用destroy()方法
			// 其中如果间隔时间为-1，则定位只定一次
			mAMapLocationManager.requestLocationData(
					LocationProviderProxy.AMapNetwork, 60 * 1000, 10, this);
		}
	}

	/**
	 * 停止定位
	 */
	@Override
	public void deactivate() {
		mListener = null;
		if (mAMapLocationManager != null) {
			mAMapLocationManager.removeUpdates(this);
			mAMapLocationManager.destroy();
		}
		mAMapLocationManager = null;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.edit_info:
			Bundle bundle = new Bundle();
			Log.i("traffic", curLocation.getStreet());
			bundle.putString("country", "中国");
			bundle.putString("province", curLocation.getProvince());
			bundle.putString("city", curLocation.getCity());
			bundle.putString("road", curLocation.getStreet());
			bundle.putString("address", curLocation.getAddress());
			Log.i("info", curLocation.getAddress() + " "+
					curLocation.getProvince() + " " + curLocation.getCity() 
					+ " " + curLocation.getStreet());

			Intent intent = new Intent(this.getActivity(), UploadMsg.class);
			intent.putExtras(bundle);
			this.startActivity(intent);
			break;
		default:
			break;
		}

	}
}
